const defaultUsers = [
    { email: "etudiant@laplateforme.fr", password: "1234", role: "Ã©tudiant" },
    { email: "moderateur@laplateforme.fr", password: "1234", role: "modÃ©rateur" },
    { email: "admin@laplateforme.fr", password: "1234", role: "administrateur" }
];

// VÃ©rifie si les utilisateurs existent dÃ©jÃ  dans le localStorage
if (!localStorage.getItem("users")) {
    localStorage.setItem("users", JSON.stringify(defaultUsers));
}

// Charge les utilisateurs et les demandes depuis localStorage
let users = JSON.parse(localStorage.getItem("users")) || [];
let requests = JSON.parse(localStorage.getItem("requests")) || [];

// ğŸ“Œ Fonction d'inscription (rÃ©servÃ©e aux emails @laplateforme.fr)
function register(email, password) {
    if (!email.endsWith("@laplateforme.fr")) {
        return false; // Seuls les emails de La Plateforme_ sont autorisÃ©s
    }

    // VÃ©rifie si l'utilisateur existe dÃ©jÃ 
    const userExists = users.some(user => user.email === email);
    if (userExists) return false;

    // Ajoute un nouvel utilisateur avec le rÃ´le "Ã©tudiant"
    users.push({ email, password, role: "Ã©tudiant" });
    localStorage.setItem("users", JSON.stringify(users));
    return true;
}

// ğŸ“Œ Fonction de connexion
function login(email, password) {
    const user = users.find(user => user.email === email && user.password === password);
    if (user) {
        setCurrentUser(user);
        return user;
    }
    return null;
}

// ğŸ“Œ Stocke l'utilisateur connectÃ© dans le localStorage
function setCurrentUser(user) {
    localStorage.setItem("currentUser", JSON.stringify(user));
}

// ğŸ“Œ RÃ©cupÃ¨re l'utilisateur actuellement connectÃ©
function getCurrentUser() {
    return JSON.parse(localStorage.getItem("currentUser"));
}

// ğŸ“Œ DÃ©connexion de l'utilisateur
function logout() {
    localStorage.removeItem("currentUser");
}

// ğŸ“Œ Demande d'autorisation de prÃ©sence (rÃ©servÃ© aux Ã©tudiants)
function requestPresence(date) {
    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== "Ã©tudiant") {
        return "Erreur : seuls les Ã©tudiants peuvent faire une demande.";
    }

    // VÃ©rifie si la date est passÃ©e
    const selectedDate = new Date(date);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // Supprime l'heure pour comparer uniquement les jours
    if (selectedDate < today) return "Impossible de choisir une date passÃ©e.";

    // Enregistre la demande
    requests.push({ email: currentUser.email, date, status: "en attente" });
    localStorage.setItem("requests", JSON.stringify(requests));
    return "Demande envoyÃ©e avec succÃ¨s !";
}

// ğŸ“Œ Afficher les demandes (rÃ©servÃ© aux modÃ©rateurs et administrateurs)
function getRequests() {
    const currentUser = getCurrentUser();
    if (!currentUser || (currentUser.role !== "modÃ©rateur" && currentUser.role !== "administrateur")) {
        return [];
    }
    return requests;
}

// ğŸ“Œ Accepter ou refuser une demande (rÃ©servÃ© aux modÃ©rateurs et administrateurs)
function updateRequestStatus(email, date, status) {
    const currentUser = getCurrentUser();
    if (!currentUser || (currentUser.role !== "modÃ©rateur" && currentUser.role !== "administrateur")) {
        return "Erreur : action non autorisÃ©e.";
    }

    // Trouver et modifier la demande
    requests = requests.map(req => {
        if (req.email === email && req.date === date) {
            return { ...req, status };
        }
        return req;
    });

    localStorage.setItem("requests", JSON.stringify(requests));
    return `Demande ${status} !`;
}

// ğŸ“Œ Gestion des rÃ´les (rÃ©servÃ© aux administrateurs)
function updateUserRole(email, newRole) {
    const currentUser = getCurrentUser();
    if (!currentUser || currentUser.role !== "administrateur") {
        return "Erreur : seuls les administrateurs peuvent modifier les rÃ´les.";
    }

    users = users.map(user => {
        if (user.email === email) {
            return { ...user, role: newRole };
        }
        return user;
    });

    localStorage.setItem("users", JSON.stringify(users));
    return `Le rÃ´le de ${email} a Ã©tÃ© mis Ã  jour en ${newRole}.`;
}

// ğŸ“Œ Ajout d'une fonction pour afficher les demandes et permettre leur acceptation/refus
function displayRequests() {
    const currentUser = getCurrentUser();
    if (!currentUser || (currentUser.role !== "modÃ©rateur" && currentUser.role !== "administrateur")) {
        alert("AccÃ¨s interdit. Vous devez Ãªtre modÃ©rateur ou administrateur.");
        return;
    }

    const requestContainer = document.getElementById("requestContainer");
    requestContainer.innerHTML = ""; // Vide le conteneur pour Ã©viter les doublons

    // Affiche toutes les demandes
    requests.forEach(req => {
        const status = req.status === "en attente" ? "En attente" : req.status === "acceptÃ©" ? "AcceptÃ©" : "RefusÃ©";
        requestContainer.innerHTML += `
            <div class="request-item">
                <p>${req.email} a demandÃ© la prÃ©sence le ${req.date}. Statut: ${status}</p>
                <button onclick="handleRequest('${req.email}', '${req.date}', 'acceptÃ©')">Accepter</button>
                <button onclick="handleRequest('${req.email}', '${req.date}', 'refusÃ©')">Refuser</button>
            </div>
        `;
    });
}

// ğŸ“Œ GÃ©rer les actions d'acceptation et de refus des demandes
function handleRequest(email, date, status) {
    const result = updateRequestStatus(email, date, status);
    alert(result);
    displayRequests(); // Met Ã  jour l'affichage des demandes
}
